{"version":3,"sources":["components/Nav/Nav.js","axios.js","requests.js","components/Banner/Banner.js","components/Row/Row.js","components/HomeScreen/HomeScreen.js","firebase.js","components/SignupScreen/SignupScreen.js","components/LoginScreen/LoginScreen.js","features/userSlice.js","components/PlansScreen/PlansScreen.js","components/ProfileScreen/ProfileScreen.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["Nav","useState","show","handleShow","history","useHistory","transitionNavBar","window","scrollY","useEffect","addEventListener","removeEventListener","className","onClick","push","src","alt","instance","axios","create","baseURL","API_KEY","requests","fetchTrending","fetchNetflixOirignals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","console","log","Banner","string","n","movie","setMovie","a","get","request","data","results","Math","floor","random","length","fetchData","style","backgroundPosition","backgroundSize","backgroundImage","backdrop_path","title","name","original_name","overview","substr","Row","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","map","poster_path","movieTrailer","then","url","urlParams","URLSearchParams","URL","search","catch","error","handleClick","id","videoId","opts","height","width","playerVars","autoplay","HomeScreen","db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firestore","auth","SignupScreen","emailRef","useRef","passwordRef","ref","placeholder","type","e","preventDefault","signInWithEmailAndPassword","current","value","authUser","alert","message","createUserWithEmailAndPassword","LoginScreen","signIn","setSignIn","userSlice","createSlice","initialState","user","reducers","login","state","action","payload","logout","actions","selectUser","PlansScreen","products","setProducts","useSelector","subscription","setSubscription","collection","doc","uid","querySnapshot","forEach","role","current_period_end","seconds","current_period_start","where","productDoc","docs","price","prices","priceId","priceData","loadCheckout","add","success_url","location","origin","cancel_url","onSnapshot","snap","sessionId","loadStripe","redirectToCheckout","Date","toLocaleDateString","Object","entries","productId","productData","isCurrentPackage","toLowerCase","includes","description","ProfileScreen","email","signOut","App","dispatch","useDispatch","onAuthStateChanged","userAuth","path","store","configureStore","reducer","userReducer","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7e52d68a.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react'\r\nimport { useHistory } from 'react-router-dom';\r\nimport './Nav.css'\r\n\r\nfunction Nav() {\r\n    const [show, handleShow] = useState(false);\r\n    const history = useHistory();\r\n    \r\n    const transitionNavBar = () => {\r\n        if (window.scrollY > 100) {\r\n            handleShow(true);\r\n        } else {\r\n            handleShow(false)\r\n        }\r\n    }\r\n\r\n    useEffect (() => {\r\n        window.addEventListener('scroll', transitionNavBar);\r\n        return () => window.removeEventListener('scroll', transitionNavBar)\r\n    },[])\r\n\r\n    return (\r\n        <div className={`nav ${show && 'nav__black'}`}>\r\n            <div className='nav__contents'>\r\n                <img onClick={() => history.push('/')} className='nav__logo' src='http://assets.stickpng.com/images/580b57fcd9996e24bc43c529.png' alt=''/>\r\n                <img onClick={() => history.push('/profile')} className='nav__avatar' src='https://pbs.twimg.com/profile_images/1240119990411550720/hBEe3tdn_400x400.png' alt=''/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nav\r\n","import axios from 'axios';\r\n\r\nconst instance = axios.create({baseURL: 'https://api.themoviedb.org/3'})\r\n\r\nexport default instance","const API_KEY = 'c99e6e307d5dfeb0116bf2ea3aabb4ce';\r\n\r\nconst requests = {\r\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n    fetchNetflixOirignals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n    fetchTopRated: `/discover/top_rated?api_key=${API_KEY}&language=en-US`,\r\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n}\r\nconsole.log('netflix originals', requests);\r\n\r\nexport default requests;","import React, {useState, useEffect} from 'react'\r\nimport './Banner.css'\r\nimport axios from '../../axios';\r\nimport requests from '../../requests';\r\n\r\nfunction Banner() {\r\n    const [movie, setMovie] = useState([]);\r\n    \r\n    useEffect (() => {\r\n        async function fetchData(){\r\n            const request = await axios.get(requests.fetchNetflixOirignals);\r\n            setMovie(request.data.results[Math.floor(Math.random() * request.data.results.length - 1)]);\r\n            console.log('fetch data', request)\r\n            return request;\r\n        }\r\n        fetchData()\r\n    }, [])\r\n    console.log(movie)\r\n    \r\n    function truncate(string, n){\r\n        return string?.length > n ? string.substr(0, n-1) + '...' : string;\r\n    }\r\n    \r\n    return (\r\n        <header className='banner' style={{backgroundPosition: 'center center', \r\n                                           backgroundSize:'cover', \r\n                                           backgroundImage:`url('https://image.tmdb.org/t/p/original/${movie?.backdrop_path}')`}}>\r\n            <div className='banner__contents'>\r\n                <h1 className='banner__title'>{movie?.title || movie?.name || movie?.original_name}</h1>\r\n                <div className='banner__buttons'>\r\n                    <button className='banner__button'>Play</button>\r\n                    <button className='banner__button'>My List</button>\r\n                </div>\r\n                <h1 className='banner__description'>{truncate(movie?.overview, 150)}</h1>\r\n            </div>\r\n            <div className='banner--fadeBottom'/>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Banner\r\n\r\n\r\n","import React, {useState, useEffect} from 'react'\r\nimport './Row.css'\r\nimport axios from '../../axios'\r\nimport requests from '../../requests'\r\nimport YouTube from 'react-youtube';\r\nimport movieTrailer from 'movie-trailer';\r\n\r\nfunction Row({title, fetchUrl, isLargeRow=false}) {\r\n    const [movies, setMovies] = useState([])\r\n    const [trailerUrl, setTrailerUrl] = useState('');\r\n    const base_url = 'https://image.tmdb.org/t/p/original/';\r\n\r\n    useEffect(() => {\r\n        async function fetchData(){\r\n            const request = await axios.get(fetchUrl);\r\n            setMovies(request.data.results);\r\n            return request;\r\n        }\r\n        fetchData();\r\n    }, [fetchUrl])\r\n    console.log(movies)\r\n\r\n    const opts = {\r\n        height: '390',\r\n        width: '100%',\r\n        playerVars : {\r\n            autoplay: 1,\r\n        },\r\n    };\r\n\r\n    const handleClick = (movie) => {\r\n        if (trailerUrl) {\r\n            setTrailerUrl('');\r\n        } else {\r\n            movieTrailer(movie?.name || '')\r\n            .then((url) =>{\r\n                const urlParams = new URLSearchParams(new URL(url).search);\r\n                setTrailerUrl(urlParams.get('v'));\r\n            })\r\n            .catch(error => console.log(error))\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <div className='row'>\r\n            <h2>{title}</h2>\r\n            <div className='row__posters'>\r\n            {movies.map((movie) => (\r\n                ((isLargeRow && movie.poster_path) || \r\n                (!isLargeRow && movie.backdrop_path)) && (\r\n                <img onClick={() => handleClick(movie)}\r\n                     className={`row__poster ${isLargeRow && 'row__posterLarge'}`}\r\n                     key={movie.id} \r\n                     src={`${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`} alt={movie.name} />\r\n            )))}\r\n            </div>\r\n            {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row\r\n","import React from 'react'\r\nimport './HomeScreen.css';\r\nimport Nav from '../Nav/Nav';\r\nimport Banner from  '../Banner/Banner'\r\nimport requests from '../../requests';\r\nimport Row from '../Row/Row';\r\n\r\nfunction HomeScreen() {\r\n    return (\r\n        <div className='homeScreen'>\r\n            <Nav />\r\n            <Banner />\r\n            <Row \r\n                title='NETFLIX ORIGINALS'\r\n                fetchUrl={requests.fetchNetflixOirignals}\r\n                isLargeRow/>\r\n            <Row title='Trending Now' fetchUrl={requests.fetchTrending} />\r\n            {/* <Row title='Top Rated' fetchUrl={requests.fetchTopRated} /> */}\r\n            <Row title='Action Movies' fetchUrl={requests.fetchActionMovies} />\r\n            <Row title='Comedy Movies' fetchUrl={requests.fetchComedyMovies} />\r\n            <Row title='Horror Movies' fetchUrl={requests.fetchHorrorMovies} />\r\n            <Row title='Romance Movies' fetchUrl={requests.fetchRomanceMovies} />\r\n            <Row title='Documentaries' fetchUrl={requests.fetchDocumentaries} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HomeScreen\r\n","import firebase from 'firebase';\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyA5M2LEu_qjFd-qwX2o8euw5f1-_6TmE34\",\r\n    authDomain: \"netflix-clone-6e211.firebaseapp.com\",\r\n    projectId: \"netflix-clone-6e211\",\r\n    storageBucket: \"netflix-clone-6e211.appspot.com\",\r\n    messagingSenderId: \"688737872012\",\r\n    appId: \"1:688737872012:web:93bdbb5ad4a78d808233a9\"\r\n  };\r\n\r\n  const firebaseApp = firebase.initializeApp(firebaseConfig);\r\n  const db = firebaseApp.firestore();\r\n  const auth = firebase.auth();\r\n\r\n  export {auth};\r\n  export default db;","import React, {useRef} from 'react'\r\nimport { auth } from '../../firebase';\r\nimport './SignupScreen.css'\r\n\r\nfunction SignupScreen() {\r\n    const emailRef = useRef(null);\r\n    const passwordRef = useRef(null);\r\n\r\n    const register = (e) => {\r\n        e.preventDefault();\r\n        \r\n        auth.createUserWithEmailAndPassword(\r\n            emailRef.current.value,\r\n            passwordRef.current.value\r\n        )\r\n        .then((authUser) => {\r\n            console.log(authUser);\r\n        })\r\n         .catch((error) => {\r\n             alert(error.message);\r\n         })\r\n    };\r\n\r\n    const signIn = (e) => {\r\n        e.preventDefault();\r\n\r\n        auth.signInWithEmailAndPassword(\r\n            emailRef.current.value,\r\n            passwordRef.current.value\r\n        )\r\n        .then((authUser) => {\r\n            console.log(authUser)\r\n        })\r\n        .catch((error) => {\r\n            alert(error.message)\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className='signupScreen'>\r\n            <form>\r\n                <h1>Sign In</h1>\r\n                <input ref={emailRef} placeholder='Email' type='email' />\r\n                <input ref={passwordRef} placeholder='Password' type='password'/>\r\n                <button type='submit' onClick={signIn}>Sign In</button>\r\n                <h4>\r\n                    <span className='signupScreen__gray'>New to Netflix? </span>\r\n                    <span className='signupScreen__link' onClick={register}>Sign up now.</span>\r\n                </h4>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SignupScreen\r\n","import React, {useState} from 'react'\r\nimport './LoginScreen.css'\r\nimport SignupScreen from '../SignupScreen/SignupScreen';\r\n\r\nfunction LoginScreen() {\r\n    const [signIn, setSignIn] = useState(false);\r\n\r\n    return (\r\n        <div className='loginScreen'>\r\n            <div className='loginScreen__background'>\r\n                <img className='loginScreen__logo' src='https://assets.stickpng.com/images/580b57fcd9996e24bc43c529.png' alt=''/>\r\n                <button className='loginScreen__button' onClick={() => setSignIn(true)}>Sign In</button>\r\n                <div className='loginScreen__gradient'></div>\r\n                <div className='loginScreen__body'>\r\n                    {signIn ? (\r\n                        <SignupScreen />\r\n                    ) : (\r\n                    <>\r\n                        <h1>Unlimited films, TV programmes and more.</h1>\r\n                        <h2>Watch anywhere, Cancel at any time.</h2>\r\n                        <h3>Ready to watch? Enter your email to create or restart your membership.</h3>\r\n                        <div className='loginScreen__input'>\r\n                            <form>\r\n                                <input type='email' placeholder='Email Adress'/>\r\n                                <button className='loginScreen__getStarted' onClick={() => setSignIn(true)}>GET STARTED</button>\r\n                            </form>\r\n                        </div>\r\n                    </>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LoginScreen\r\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState: {\n    user: null,\n  },\n  reducers: {\n    login: (state, action) => {\n      state.user = action.payload;\n    },\n    logout: (state) => {\n      state.user = null;\n    }\n  },\n});\n\nexport const { login, logout} = userSlice.actions;\n\nexport const selectUser = (state) => state.user.user;\n\nexport default userSlice.reducer;\n","import React, {useState, useEffect} from 'react'\r\nimport { useSelector } from 'react-redux';\r\nimport { selectUser } from '../../features/userSlice';\r\nimport db from '../../firebase';\r\nimport './PlansScreen.css'\r\nimport {loadStripe} from '@stripe/stripe-js';\r\n\r\nfunction PlansScreen() {\r\n    const [products, setProducts] = useState([]);\r\n    const user = useSelector(selectUser);\r\n    const [subscription, setSubscription] = useState(null);\r\n\r\n    useEffect(() => {\r\n        db.collection('customers').doc(user.uid) .collection('subscriptions').get()\r\n        .then(querySnapshot => {\r\n            querySnapshot.forEach(async subscription => {\r\n                setSubscription({\r\n                    role: subscription.data().role,\r\n                    current_period_end: subscription.data().current_period_end.seconds,\r\n                    current_period_start: subscription.data().current_period_start.seconds,\r\n                });\r\n            });\r\n        });       \r\n    },[user.uid]);\r\n    console.log(subscription)\r\n\r\n    useEffect(() =>{\r\n        db.collection('products').where('active', '==', true)\r\n        .get().then(querySnapshot => {\r\n            const products ={};\r\n            querySnapshot.forEach(async productDoc => {\r\n                products[productDoc.id] = productDoc.data();\r\n                const priceSnap = await productDoc.ref.collection('prices').get();\r\n                priceSnap.docs.forEach(price => {\r\n                    products[productDoc.id].prices = {\r\n                        priceId: price.id,\r\n                        priceData: price.data()\r\n                    }\r\n                })\r\n            });\r\n            setProducts(products);\r\n        });\r\n    },[])\r\n    console.log(products);\r\n\r\n    const loadCheckout = async(priceId) => {\r\n        const docRef = await db.collection('customers').doc(user.uid).collection('checkout_sessions')\r\n        .add({\r\n            price: priceId,\r\n            success_url: window.location.origin,\r\n            cancel_url: window.location.origin,\r\n        });\r\n        docRef.onSnapshot(async(snap) => {\r\n            const {error, sessionId} = snap.data();\r\n            if (error) {\r\n                alert(`An error occured: ${error.message}`);\r\n            }\r\n            if (sessionId) {\r\n                const stripe = await loadStripe('pk_test_51J2df7CTVwmN6IjA7mwtyhNONamWZ63RtYAxFB47stlHKJGifB5iQ2YjVZf3XirUuTQZwcjsNIx84eI0cwjmGjT900AkAyUrCQ');\r\n                stripe.redirectToCheckout({sessionId});\r\n            }\r\n        })                                \r\n    };\r\n\r\n    return (\r\n        <div className='plansScreen'>\r\n            <br/>\r\n            {subscription && <p>Renewal date: {new Date(subscription?.current_period_end * 1000).toLocaleDateString()}</p>}\r\n            {Object.entries(products).map(([productId, productData]) => {\r\n                const isCurrentPackage = productData.name?.toLowerCase().includes(subscription?.role);\r\n                console.log(isCurrentPackage, 'is current ')\r\n                return (\r\n                   <div key={productId} className={`${isCurrentPackage && 'plansScreen__plan--disabled'} plansScreen__plan`}>\r\n                       <div className='plansScreen__info'>\r\n                           <h5>{productData.name}</h5>\r\n                           <h6>{productData.description}</h6>\r\n                       </div>\r\n                       <button onClick={() => !isCurrentPackage && loadCheckout(productData.prices.priceId)}>\r\n                           {isCurrentPackage ? 'Current Package' : 'Subscribe'}\r\n                        </button>\r\n                   </div> \r\n                );\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PlansScreen\r\n","import React from 'react'\r\nimport './ProfileScreen.css'\r\nimport Nav from '../Nav/Nav'\r\nimport { useSelector } from 'react-redux'\r\nimport { selectUser } from '../../features/userSlice'\r\nimport { auth } from '../../firebase'\r\nimport PlansScreen from '../PlansScreen/PlansScreen'\r\n\r\nfunction ProfileScreen() {\r\n    const user = useSelector(selectUser);\r\n\r\n    return (\r\n        <div className='profileScreen'>\r\n            <Nav/>\r\n            <div className='profileScreen__body'>\r\n                <h1>Edit Profile</h1>\r\n                <div className='profileScreen__info'>\r\n                    <img src='https://pbs.twimg.com/profile_images/1240119990411550720/hBEe3tdn_400x400.png' alt=''/>\r\n                    <div className='profileScreen__details'>\r\n                        <h2>{user.email}</h2>\r\n                        <div className='profileScreen__plans'>\r\n                            <h3>Plans</h3>\r\n                            <PlansScreen />\r\n                           <button onClick={() => auth.signOut()} className='profileScreen__signOut'>Sign Out</button> \r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileScreen\r\n","import React, {useEffect} from 'react';\nimport './App.css';\nimport HomeScreen from './components/HomeScreen/HomeScreen'\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\nimport LoginScreen from './components/LoginScreen/LoginScreen';\nimport { auth } from './firebase';\nimport { login, logout, selectUser } from './features/userSlice';\nimport {useDispatch, useSelector} from 'react-redux';\nimport ProfileScreen from './components/ProfileScreen/ProfileScreen';\n\nfunction App() {\n  const user = useSelector(selectUser);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      if (userAuth) {\n        //logged in\n        dispatch(login({\n          uid: userAuth.uid,\n          email: userAuth.email,\n        }))\n      } else {\n        //logged out\n        dispatch(logout());\n      }\n    });\n    return unsubscribe;\n  },[dispatch]);\n\n  return (\n    <div className=\"app\">\n      <Router>\n        {!user ? (\n          <LoginScreen />\n        ) : (\n          <Switch>\n            <Route path='/profile'>\n              <ProfileScreen />\n            </Route>\n            <Route path='/'>\n              <HomeScreen />\n            </Route>\n          </Switch>\n        )}\n     </Router>)\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport userReducer from '../features/userSlice';\n\nexport const store = configureStore({\n  reducer: {\n    user: userReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}